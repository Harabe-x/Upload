// <auto-generated />
using System;
using ImageVault.ImageService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ImageVault.ImageService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ImageVault.ImageService.Data.Models.ApiKey", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("ImageVault.ImageService.Data.Models.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Collection")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("text");

                    b.Property<string>("ImageCollectionId")
                        .HasColumnType("text");

                    b.Property<string>("ImageFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ImageSize")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImageCollectionId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ImageVault.ImageService.Data.Models.ImageCollection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CollectionCoverUrl")
                        .HasColumnType("text");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("TotalImages")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ImageCollections");
                });

            modelBuilder.Entity("ImageVault.ImageService.Data.Models.Image", b =>
                {
                    b.HasOne("ImageVault.ImageService.Data.Models.ImageCollection", "ImageCollection")
                        .WithMany("ImagesCollection")
                        .HasForeignKey("ImageCollectionId");

                    b.Navigation("ImageCollection");
                });

            modelBuilder.Entity("ImageVault.ImageService.Data.Models.ImageCollection", b =>
                {
                    b.Navigation("ImagesCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
